syntax = "proto3";

package agent;

option go_package = "tournament_engine/services/agent";

import "tournament_engine_API/util/util.proto";
import "tournament_engine_API/eventemitter/eventemitter.proto";
import "tournament_engine_API/game_comm/game_comm.proto";

message AgentItem {
    // int64 tournament_id = 1;    // the tournament the agent is a part of
    // int64 game_id =2;           // a game the agent is a part ofS
    string name = 3;                // the name of the player or referee
    string source_path = 4;         // the path to the player or referee project
    // string git_source = 5;      // the source of the git respository is needed
    // uploadType type = 6;        // The type of the upload to determine how to treat the upload and agent
    // oneof upload {
    //     FilePacket FilePacket = 7;
    //     GitLink GitLink = 8;
    // }
    // Commands command = 9;
    repeated Command commands = 5;
    util.Status status = 6;
}

message CreateAgent {
    AgentItem agent = 1;    // the name of the agent to create
    oneof data {
        FilePacket filepacket = 2;
        GitLink gitlink = 3;
    }
}

message AgentRequest {
    string name = 1;
}

message AgentRunningResponse {
    bool Running = 1;
}


enum uploadType {
    File_upload = 0;
    Docker = 1;
    Git_link = 2;
}
// to be implemented
message DockerSettings{
    // ...
}

// message uploadDetail {
//     string file_name = 1;
// }

message FileUpload {
    AgentRequest agent = 1;
    uploadType type = 2;
    oneof upload {
        FilePacket FilePacket = 3;
        GitLink GitLink = 4;
    }
}

enum CommandType {
    COMPILE = 0;
    RUN = 1;
    CLEAN = 2;
}

message Command {
    string command = 1;
    string commandDir = 2;
    CommandType type = 3;
    bool required = 4;
}

message FilePacket {
    bytes fileBytes = 1;
    int32 No_bytes = 2;
    string filename = 3;
    string filepath = 4;
}

message GitLink {
    string Address = 1; // the address of the repository
    string Subdirectory = 2; // The specific subdirectory to try and clone
    string DestName = 3;
    // .. TODO add additional requirements such as validation etc.
}

message AgentList {
    repeated AgentItem agents = 1;
}

service AgentService {
    /* create a new Agent */
    rpc createAgent(stream CreateAgent) returns(AgentItem);
    /* list the players */
    rpc listPlayers(util.Request) returns(AgentList);
    rpc uploadFile(stream FileUpload) returns(util.Response);

    rpc startAgent(AgentRequest) returns(util.Response);
    rpc stopAgent(AgentRequest) returns(util.Response);

    rpc IsRunning(AgentRequest) returns(AgentRunningResponse);

    rpc ConnectToStream(AgentRequest) returns(stream eventemitter.Event);
    rpc ConnectToManager(stream game_comm.GameEvent) returns(stream game_comm.GameEvent);
}